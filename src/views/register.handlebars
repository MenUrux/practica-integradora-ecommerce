<div class="mx-auto flex">
  <div
    class="mx-auto bg-white shadow-md border min-w-[80vh] border-gray-200 rounded-lg p-4 sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700 ">
    <form action="/api/sessions/register" method="post" class="flex flex-col gap-2">
      <h3 class="text-xl font-medium text-gray-900 dark:text-white text-center">Registrarse</h3>

      <div>
        <label for="email" class="text-sm font-medium text-gray-900 block mb-2 dark:text-gray-300">Email</label>
        <input type="email" name="email" placeholder="juanperez1122@gmail.com"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
          placeholder="name@company.com" required="">

      </div>

      <div>
        <label for="password" class="text-sm font-medium text-gray-900 block mb-2 dark:text-gray-300">Contraseña</label>
        <input type="password" name="password" placeholder="••••••••"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
          required="">
      </div>

      <div>
        <label for="first_name" class="text-sm font-medium text-gray-900 block mb-2 dark:text-gray-300">Nombre</label>
        <input type="text" id="name" name="first_name" placeholder="Juan"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
          required="">
      </div>

      <div>
        <label for="last_name" class="text-sm font-medium text-gray-900 block mb-2 dark:text-gray-300">Apellido</label>
        <input type="text" id="lastname" name="last_name" placeholder="Pérez"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
          required="">
      </div>

      <div>
        <label for="age" class="text-sm font-medium text-gray-900 block mb-2 dark:text-gray-300">Edad</label>
        <input type="number" name="age" placeholder="18" min="18"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"
          required="">
      </div>

      <button type="submit"
        class="w-full transition-all text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Registrarse</button>
      <div class="text-sm font-medium text-gray-500 dark:text-gray-300">
        ¿Ya tienes usuario? <a href="/login" class="text-blue-700 hover:underline dark:text-blue-500">
          Iniciar sesión</a>
      </div>

    </form>

  </div>
</div>

<script>

  document.addEventListener("DOMContentLoaded", function () {
    const form = document.querySelector("form[action='/api/sessions/register']");

    form.addEventListener("submit", function (event) {
      event.preventDefault(); // Detiene el envío normal del formulario

      // Recopilar los datos del formulario
      const formData = new FormData(form);

      // Enviar los datos del formulario al servidor mediante Fetch API
      fetch(form.action, {
        method: 'POST',
        body: formData
        // No es necesario 'headers' cuando se envía un FormData, 
        // Fetch establece el 'Content-Type' automáticamente
      })
        .then(async response => {
          if (response.ok) {
            return response.json(); // Si la respuesta es 200-299, intenta analizarla como JSON
          } else {
            const text = await response.text(); // Si no, obtén la respuesta como texto
            try {
              const data = JSON.parse(text); // Intenta analizar el texto como JSON
              throw new Error(data.message || "Error en el registro."); // Lanza un error con el mensaje de la respuesta
            } catch (error) {
              // Si el texto no es JSON, usa el texto directamente
              throw new Error(text || "Error desconocido.");
            }
          }
        })
        .then(data => {
          // Maneja el registro exitoso
          Toastify({
            text: data.message,
            duration: 3000,
            close: true,
            gravity: "top",
            position: "right",
            backgroundColor: "#4fbe87",
            callback: function () { window.location.href = '/login'; }
          }).showToast();
        })
        .catch(error => {
          // Maneja los errores del registro
          Toastify({
            text: error.message,
            duration: 3000,
            close: true,
            gravity: "top",
            position: "right",
            backgroundColor: "#D32F2F",
          }).showToast();
        });
    });
  });


</script>